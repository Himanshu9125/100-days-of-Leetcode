class Solution {
public:
    bool dfs(int r, int c, int m, int n, vector<vector<int>>& grid, vector<vector<bool>>& vis) {
        if (r < 0 || c < 0 || r >= m || c >= n) {
            return false;  // Out of bounds means it's not a closed island
        }
        if (grid[r][c] == 1 || vis[r][c]) {
            return true;  // Either water or already visited
        }
        
        vis[r][c] = true;  // Mark this cell as visited
        
        // Explore all 4 directions
        bool up = dfs(r - 1, c, m, n, grid, vis);
        bool down = dfs(r + 1, c, m, n, grid, vis);
        bool left = dfs(r, c - 1, m, n, grid, vis);
        bool right = dfs(r, c + 1, m, n, grid, vis);
        
        // Only return true if all four directions are closed islands
        return up && down && left && right;
    }

    int closedIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> vis(m, vector<bool>(n, false));// making a visited array
        int ans = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0 && !vis[i][j]) {
                    // If DFS returns true, it's a closed island
                    if (dfs(i, j, m, n, grid, vis)) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
};
